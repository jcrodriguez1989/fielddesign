% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit_exhaustive_optimal_plot_size.R
\name{fit_exhaustive_optimal_plot_size}
\alias{fit_exhaustive_optimal_plot_size}
\title{Calculate Optimal Plot Size from Spatial Variation Data}
\usage{
fit_exhaustive_optimal_plot_size(
  sv,
  nr,
  nc,
  include_interaction = TRUE,
  tau = c(1, 1)
)
}
\arguments{
\item{sv}{A data frame, typically the output of `spatial_variation_exhaustive`, containing
`Length`, `Width`, and `CV` columns.}

\item{nr}{The number of rows of the original input matrix from which `sv` was derived.}

\item{nc}{The number of columns of the original input matrix from which `sv` was derived.}

\item{include_interaction}{A logical value. If `TRUE` (default), the quadratic model includes an
interaction term between `Length` and `Width`.}

\item{tau}{A numeric vector of length 2, representing the penalty for deviations from an ideal
square shape `c(tau_height, tau_width)` in the optimization.}
}
\value{
A list containing the fitted model, coefficients, Hessian matrix, gradient, `tau`
  values, continuous optimal `h_star` and `w_star`, integer optimal `h_opt` and `w_opt`,
  predicted CV at continuous and integer optima, the `include_interaction` flag, and
  `method_used` indicating whether "analytical" or "constrained" optimization was used.
}
\description{
This function fits a quadratic model to spatial variation data (e.g., Coefficient of Variation)
obtained from exhaustive sliding window analysis, and then determines the optimal plot size
(height and width) based on the fitted model and a penalty (`tau`). It first attempts an
analytical solution, and if that produces negative or out-of-bounds values, falls back to
constrained numerical optimization.
}
\examples{
\dontrun{
# Generate simulated data.
set.seed(420)
nr <- 10
nc <- 10
x <- matrix(rnorm(nr * nc, 500, 60), nrow = nr, ncol = nc)
# Calculate the exhaustive spatial variation.
sv_exh <- spatial_variation_exhaustive(x)$res
# Calculate the optimal plot size.
exh_ops <- fit_exhaustive_optimal_plot_size(sv_exh, nr, nc)
print(exh_ops)
# Calculate the tiling spatial variation.
sv_tiling <- spatial_variation_tiling(x)$res
# Calculate the optimal plot size.
tiling_ops <- fit_exhaustive_optimal_plot_size(sv_tiling, nr, nc)
print(tiling_ops)
}

}
